#version 400 core


struct PnPatch
{
    float b210;
    float b120;
    float b021;
    float b012;
    float b102;
    float b201;
    float b111;
    float n110;
    float n101;
    float n011;
};


layout (triangles, equal_spacing, ccw) in; 



uniform sampler2D texture1;
//uniform float disFactor;+


in vec3 tcPosition[];
in vec3 tcNormal[];
in vec2 tcTexCoord[];
in PnPatch tcPnPatch[];


out vec3 tePosition;
out vec3 teNormal;
out vec2 teTexCoord;
out vec3 tePatchDistance;
//layout(location = 12) out vec3 teTriDistance;



uniform mat4 projection;
uniform mat4 model;
uniform mat4 view;



void main()
{
    // barycentric uvw



    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    vec3 n200 = tcNormal[0];
    vec3 n020 = tcNormal[1];
    vec3 n002 = tcNormal[2];

    
    

    vec3 b300 = tcPosition[0];
    vec3 b030 = tcPosition[1];
    vec3 b003 = tcPosition[2];

  

    vec3 b210 = vec3(tcPnPatch[0].b210, tcPnPatch[1].b210, tcPnPatch[2].b210);
    vec3 b120 = vec3(tcPnPatch[0].b120, tcPnPatch[1].b120, tcPnPatch[2].b120);
    vec3 b021 = vec3(tcPnPatch[0].b021, tcPnPatch[1].b021, tcPnPatch[2].b021);
    vec3 b012 = vec3(tcPnPatch[0].b012, tcPnPatch[1].b012, tcPnPatch[2].b012);
    vec3 b102 = vec3(tcPnPatch[0].b102, tcPnPatch[1].b102, tcPnPatch[2].b102);
    vec3 b201 = vec3(tcPnPatch[0].b201, tcPnPatch[1].b201, tcPnPatch[2].b201);
    vec3 b111 = vec3(tcPnPatch[0].b111, tcPnPatch[1].b111, tcPnPatch[2].b111);

   

    vec3 n110 = normalize(vec3(tcPnPatch[0].n110, tcPnPatch[1].n110, tcPnPatch[2].n110));
    vec3 n011 = normalize(vec3(tcPnPatch[0].n011, tcPnPatch[1].n011, tcPnPatch[2].n011));
    vec3 n101 = normalize(vec3(tcPnPatch[0].n101, tcPnPatch[1].n101, tcPnPatch[2].n101));

    
   

	
	teTexCoord = gl_TessCoord.x * tcTexCoord[0] + gl_TessCoord.y * tcTexCoord[1] + gl_TessCoord.z * tcTexCoord[2];
	
    vec3 barNormal =gl_TessCoord[2] * tcNormal[0] + gl_TessCoord[0] * tcNormal[1] + gl_TessCoord[1] * tcNormal[2];

    vec3 pnNormal = n200 * w * w + n020 * u * u + n002 * v * v + n110 * w * u + n011 * u * v + n101 * w * v;

    float uTessAlpha = 1.0f;

    teNormal = uTessAlpha * pnNormal + (1.0f - uTessAlpha) * barNormal;

    //normal mat
    mat4 norMat = inverse(model);
    
    teNormal = (norMat * vec4(teNormal, 0.0)).xyz; // reason?



    vec3 barPos = gl_TessCoord[0] * b300 + gl_TessCoord[1] * b030 + gl_TessCoord[2] * b003;

    //vec3 pnPos = 1.0f * b300 * u * u * u + 1.0f * b030 * v * v * v + 1.0f * b003 * w * w * w + 3.0f * b210 * u * u * v + 3.0f * b120 * v * v * u + 3.0f * b201 * u * u * w + 3.0f * b021 * v * v * w + 3.0f * b102 * w * w * u + 3.0f * b012 * w * w * v + 6.0f * b111 * u * v * w;



    vec3 pnPos = 1.0f * b300 * w * w * w + 1.0f * b030 * u * u * u + 1.0f * b003 * v * v * v + 3.0f * b210 * w * w * u + 3.0f * b120 * w * u * u + 3.0f * b201 * w * w * v + 3.0f * b021 * u * u * v + 3.0f * b102 * w * v * v + 3.0f * b012 * v * v * u + 6.0f * b111 * u * v * w;

    vec3 finalPos = (1.0 - uTessAlpha) * barPos + uTessAlpha * pnPos;







	//displacement
	//float displacement = texture(texture1, teTexCoord).x;
	//tmpPosition += teNormal * displacement * 0.1;// dispFactor
	

	
    
    gl_Position = projection * view * model * vec4(finalPos, 1.0f);
    
    //tePosition  = (view * vec4(finalPos, 1.0)).xyz / (view *  vec4(finalPos, 1.0)).w;// ???
    tePatchDistance = gl_TessCoord;

}
